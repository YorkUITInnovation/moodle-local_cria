{"version":3,"file":"topic_options.min.js","sources":["../src/topic_options.js"],"sourcesContent":["/**\n * Topic Options Builder\n *\n * @module     local_cria/topic_options\n * @copyright  2024 Patrick Thibaudeau\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\n/**\n * Initialize the topic options builder\n */\nexport const init = () => {\n    const buildButton = document.getElementById('build-options-array');\n    if (buildButton) {\n        buildButton.addEventListener('click', openModal);\n    }\n};\n\n/**\n * Open the topic options builder modal\n */\nconst openModal = async () => {\n    try {\n        // Get existing options if any\n        const existingData = getExistingOptions();\n        \n        // Render the modal body\n        const body = await Templates.render('local_cria/topic_options_modal', {\n            options: existingData\n        });\n\n        // Create modal using ModalFactory\n        const modal = await ModalFactory.create({\n            title: 'Topic Options Builder',\n            body: body,\n            large: true\n        });\n\n        // Set up event listeners\n        setupModalEvents(modal);\n        \n        // Show the modal\n        modal.show();\n\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Get existing options from the textarea\n * @returns {Array} Array of option objects\n */\nconst getExistingOptions = () => {\n    const textarea = document.getElementById('id_topic_options');\n    console.log('Looking for textarea with id: id_topic_options');\n    console.log('Textarea found:', textarea);\n    \n    if (!textarea) {\n        console.log('Textarea not found!');\n        return [];\n    }\n    \n    console.log('Textarea value:', textarea.value);\n    \n    if (!textarea.value.trim()) {\n        console.log('Textarea is empty');\n        return [];\n    }\n\n    try {\n        const data = JSON.parse(textarea.value);\n        console.log('Parsed JSON data:', data);\n        \n        // Data should already be in the correct format: [{value: \"...\", label: \"...\"}, ...]\n        const result = Array.isArray(data) ? data : [];\n        \n        console.log('Options data for template:', result);\n        return result;\n    } catch (e) {\n        console.error('Error parsing JSON:', e);\n        return [];\n    }\n};\n\n/**\n * Setup modal event listeners\n * @param {Modal} modal The modal instance\n */\nconst setupModalEvents = (modal) => {\n    const modalRoot = modal.getRoot()[0];\n\n    // Add option button\n    modalRoot.querySelector('#add-option-btn').addEventListener('click', () => {\n        addOptionRow(modalRoot);\n    });\n\n    // Save button\n    modalRoot.querySelector('#save-options-btn').addEventListener('click', () => {\n        saveOptions(modal);\n    });\n\n    // Cancel button\n    modalRoot.querySelector('#cancel-options-btn').addEventListener('click', () => {\n        modal.hide();\n    });\n\n    // Remove option buttons (using event delegation)\n    modalRoot.addEventListener('click', (e) => {\n        if (e.target.classList.contains('remove-option-btn')) {\n            e.target.closest('.option-row').remove();\n        }\n    });\n\n    // Modal close events\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        modal.destroy();\n    });\n};\n\n/**\n * Add a new option row to the modal\n * @param {Element} modalRoot The modal root element\n */\nconst addOptionRow = (modalRoot) => {\n    const container = modalRoot.querySelector('#options-container');\n    const rowHtml = `\n        <div class=\"option-row mb-3 p-3 border rounded\">\n            <div class=\"row\">\n                <div class=\"col-md-5\">\n                    <label class=\"form-label\">Option Value:</label>\n                    <input type=\"text\" class=\"form-control option-value\" placeholder=\"e.g., technical\">\n                </div>\n                <div class=\"col-md-6\">\n                    <label class=\"form-label\">Option Label:</label>\n                    <input type=\"text\" class=\"form-control option-label\" placeholder=\"e.g., Technical Support\">\n                </div>\n                <div class=\"col-md-1 d-flex align-items-end\">\n                    <button type=\"button\" class=\"btn btn-danger btn-sm remove-option-btn\">\n                        <i class=\"fa fa-trash\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    container.insertAdjacentHTML('beforeend', rowHtml);\n};\n\n/**\n * Save options and update the original textarea\n * @param {Modal} modal The modal instance\n */\nconst saveOptions = (modal) => {\n    const modalRoot = modal.getRoot()[0];\n    const optionRows = modalRoot.querySelectorAll('.option-row');\n    const optionsArray = [];\n\n    // Validate and collect data\n    let isValid = true;\n    optionRows.forEach(row => {\n        const optionValue = row.querySelector('.option-value').value.trim();\n        const optionLabel = row.querySelector('.option-label').value.trim();\n\n        if (optionValue && optionLabel) {\n            optionsArray.push({\n                value: optionValue,\n                label: optionLabel\n            });\n        } else if (optionValue || optionLabel) {\n            // If only one field is filled, show error\n            isValid = false;\n            row.style.border = '2px solid red';\n        }\n    });\n\n    if (!isValid) {\n        Notification.alert('Error', 'Please fill in both option value and label for all rows, or remove empty rows.');\n        return;\n    }\n\n    // Update the original textarea using the specific ID\n    const textarea = document.getElementById('id_topic_options');\n    if (textarea) {\n        textarea.value = JSON.stringify(optionsArray, null, 2);\n        \n        // Trigger change event\n        const event = new Event('change', { bubbles: true });\n        textarea.dispatchEvent(event);\n    }\n\n    // Show success message\n    Notification.addNotification({\n        message: 'Options array updated successfully!',\n        type: 'success'\n    });\n\n    // Close modal\n    modal.hide();\n};\n"],"names":["buildButton","document","getElementById","addEventListener","openModal","async","existingData","getExistingOptions","body","Templates","render","options","modal","ModalFactory","create","title","large","setupModalEvents","show","error","exception","textarea","console","log","value","trim","data","JSON","parse","result","Array","isArray","e","modalRoot","getRoot","querySelector","addOptionRow","saveOptions","hide","target","classList","contains","closest","remove","on","ModalEvents","hidden","destroy","insertAdjacentHTML","optionRows","querySelectorAll","optionsArray","isValid","forEach","row","optionValue","optionLabel","push","label","style","border","alert","stringify","event","Event","bubbles","dispatchEvent","addNotification","message","type"],"mappings":";;;;;;;4SAgBoB,WACVA,YAAcC,SAASC,eAAe,uBACxCF,aACAA,YAAYG,iBAAiB,QAASC,kBAOxCA,UAAYC,oBAGJC,aAAeC,qBAGfC,WAAaC,mBAAUC,OAAO,iCAAkC,CAClEC,QAASL,eAIPM,YAAcC,uBAAaC,OAAO,CACpCC,MAAO,wBACPP,KAAMA,KACNQ,OAAO,IAIXC,iBAAiBL,OAGjBA,MAAMM,OAER,MAAOC,6BACQC,UAAUD,SAQzBZ,mBAAqB,WACjBc,SAAWpB,SAASC,eAAe,uBACzCoB,QAAQC,IAAI,kDACZD,QAAQC,IAAI,kBAAmBF,WAE1BA,gBACDC,QAAQC,IAAI,uBACL,MAGXD,QAAQC,IAAI,kBAAmBF,SAASG,QAEnCH,SAASG,MAAMC,cAChBH,QAAQC,IAAI,qBACL,aAIDG,KAAOC,KAAKC,MAAMP,SAASG,OACjCF,QAAQC,IAAI,oBAAqBG,YAG3BG,OAASC,MAAMC,QAAQL,MAAQA,KAAO,UAE5CJ,QAAQC,IAAI,6BAA8BM,QACnCA,OACT,MAAOG,UACLV,QAAQH,MAAM,sBAAuBa,GAC9B,KAQTf,iBAAoBL,cAChBqB,UAAYrB,MAAMsB,UAAU,GAGlCD,UAAUE,cAAc,mBAAmBhC,iBAAiB,SAAS,KACjEiC,aAAaH,cAIjBA,UAAUE,cAAc,qBAAqBhC,iBAAiB,SAAS,KACnEkC,YAAYzB,UAIhBqB,UAAUE,cAAc,uBAAuBhC,iBAAiB,SAAS,KACrES,MAAM0B,UAIVL,UAAU9B,iBAAiB,SAAU6B,IAC7BA,EAAEO,OAAOC,UAAUC,SAAS,sBAC5BT,EAAEO,OAAOG,QAAQ,eAAeC,YAKxC/B,MAAMsB,UAAUU,GAAGC,sBAAYC,QAAQ,KACnClC,MAAMmC,cAQRX,aAAgBH,YACAA,UAAUE,cAAc,sBAoBhCa,mBAAmB,+3BAO3BX,YAAezB,cAEXqC,WADYrC,MAAMsB,UAAU,GACLgB,iBAAiB,eACxCC,aAAe,OAGjBC,SAAU,KACdH,WAAWI,SAAQC,YACTC,YAAcD,IAAInB,cAAc,iBAAiBX,MAAMC,OACvD+B,YAAcF,IAAInB,cAAc,iBAAiBX,MAAMC,OAEzD8B,aAAeC,YACfL,aAAaM,KAAK,CACdjC,MAAO+B,YACPG,MAAOF,eAEJD,aAAeC,eAEtBJ,SAAU,EACVE,IAAIK,MAAMC,OAAS,qBAItBR,0CACYS,MAAM,QAAS,wFAK1BxC,SAAWpB,SAASC,eAAe,uBACrCmB,SAAU,CACVA,SAASG,MAAQG,KAAKmC,UAAUX,aAAc,KAAM,SAG9CY,MAAQ,IAAIC,MAAM,SAAU,CAAEC,SAAS,IAC7C5C,SAAS6C,cAAcH,6BAIdI,gBAAgB,CACzBC,QAAS,sCACTC,KAAM,YAIVzD,MAAM0B"}