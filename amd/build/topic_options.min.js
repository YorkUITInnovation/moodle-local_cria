define("local_cria/topic_options",["exports","core/modal_factory","core/modal_events","core/templates","core/notification"],(function(_exports,_modal_factory,_modal_events,_templates,_notification){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Topic Options Builder
   *
   * @module     local_cria/topic_options
   * @copyright  2024 Patrick Thibaudeau
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_templates=_interopRequireDefault(_templates),_notification=_interopRequireDefault(_notification);_exports.init=()=>{const buildButton=document.getElementById("build-options-array");buildButton&&buildButton.addEventListener("click",openModal)};const openModal=async()=>{try{const existingData=getExistingOptions(),body=await _templates.default.render("local_cria/topic_options_modal",{options:existingData}),modal=await _modal_factory.default.create({title:"Topic Options Builder",body:body,large:!0});setupModalEvents(modal),modal.show()}catch(error){_notification.default.exception(error)}},getExistingOptions=()=>{const textarea=document.getElementById("id_topic_options");if(console.log("Looking for textarea with id: id_topic_options"),console.log("Textarea found:",textarea),!textarea)return console.log("Textarea not found!"),[];if(console.log("Textarea value:",textarea.value),!textarea.value.trim())return console.log("Textarea is empty"),[];try{const data=JSON.parse(textarea.value);console.log("Parsed JSON data:",data);const result=Array.isArray(data)?data:[];return console.log("Options data for template:",result),result}catch(e){return console.error("Error parsing JSON:",e),[]}},setupModalEvents=modal=>{const modalRoot=modal.getRoot()[0];modalRoot.querySelector("#add-option-btn").addEventListener("click",(()=>{addOptionRow(modalRoot)})),modalRoot.querySelector("#save-options-btn").addEventListener("click",(()=>{saveOptions(modal)})),modalRoot.querySelector("#cancel-options-btn").addEventListener("click",(()=>{modal.hide()})),modalRoot.addEventListener("click",(e=>{e.target.classList.contains("remove-option-btn")&&e.target.closest(".option-row").remove()})),modal.getRoot().on(_modal_events.default.hidden,(()=>{modal.destroy()}))},addOptionRow=modalRoot=>{modalRoot.querySelector("#options-container").insertAdjacentHTML("beforeend",'\n        <div class="option-row mb-3 p-3 border rounded">\n            <div class="row">\n                <div class="col-md-5">\n                    <label class="form-label">Option Value:</label>\n                    <input type="text" class="form-control option-value" placeholder="e.g., technical">\n                </div>\n                <div class="col-md-6">\n                    <label class="form-label">Option Label:</label>\n                    <input type="text" class="form-control option-label" placeholder="e.g., Technical Support">\n                </div>\n                <div class="col-md-1 d-flex align-items-end">\n                    <button type="button" class="btn btn-danger btn-sm remove-option-btn">\n                        <i class="fa fa-trash"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    ')},saveOptions=modal=>{const optionRows=modal.getRoot()[0].querySelectorAll(".option-row"),optionsArray=[];let isValid=!0;if(optionRows.forEach((row=>{const optionValue=row.querySelector(".option-value").value.trim(),optionLabel=row.querySelector(".option-label").value.trim();optionValue&&optionLabel?optionsArray.push({value:optionValue,label:optionLabel}):(optionValue||optionLabel)&&(isValid=!1,row.style.border="2px solid red")})),!isValid)return void _notification.default.alert("Error","Please fill in both option value and label for all rows, or remove empty rows.");const textarea=document.getElementById("id_topic_options");if(textarea){textarea.value=JSON.stringify(optionsArray,null,2);const event=new Event("change",{bubbles:!0});textarea.dispatchEvent(event)}_notification.default.addNotification({message:"Options array updated successfully!",type:"success"}),modal.hide()}}));

//# sourceMappingURL=topic_options.min.js.map