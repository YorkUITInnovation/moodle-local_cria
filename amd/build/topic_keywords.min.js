define("local_cria/topic_keywords",["exports","core/modal_factory","core/modal_events","core/templates","core/notification"],(function(_exports,_modal_factory,_modal_events,_templates,_notification){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Topic Keywords Builder
   *
   * @module     local_cria/topic_keywords
   * @copyright  2024 Patrick Thibaudeau
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_templates=_interopRequireDefault(_templates),_notification=_interopRequireDefault(_notification);_exports.init=()=>{const buildButton=document.getElementById("build-keywords-array");buildButton&&buildButton.addEventListener("click",openModal)};const openModal=async()=>{try{const existingData=getExistingKeywords(),body=await _templates.default.render("local_cria/topic_keywords_modal",{topics:existingData}),modal=await _modal_factory.default.create({title:"Topic Keywords Builder",body:body,large:!0});setupModalEvents(modal),modal.show()}catch(error){_notification.default.exception(error)}},getExistingKeywords=()=>{const textarea=document.getElementById("id_topic_keywords");if(console.log("Looking for textarea with id: id_topic_keywords"),console.log("Textarea found:",textarea),!textarea)return console.log("Textarea not found!"),[];if(console.log("Textarea value:",textarea.value),!textarea.value.trim())return console.log("Textarea is empty"),[];try{const data=JSON.parse(textarea.value);console.log("Parsed JSON data:",data);const result=Object.entries(data).map((_ref=>{let[key,keywords]=_ref;return{topic:key,keywords:Array.isArray(keywords)?keywords.join(", "):""}}));return console.log("Converted data for template:",result),result}catch(e){return console.error("Error parsing JSON:",e),[]}},setupModalEvents=modal=>{const modalRoot=modal.getRoot()[0];modalRoot.querySelector("#add-topic-btn").addEventListener("click",(()=>{addTopicRow(modalRoot)})),modalRoot.querySelector("#save-keywords-btn").addEventListener("click",(()=>{saveKeywords(modal)})),modalRoot.querySelector("#cancel-keywords-btn").addEventListener("click",(()=>{modal.hide()})),modalRoot.addEventListener("click",(e=>{e.target.classList.contains("remove-topic-btn")&&e.target.closest(".topic-row").remove()})),modal.getRoot().on(_modal_events.default.hidden,(()=>{modal.destroy()}))},addTopicRow=modalRoot=>{modalRoot.querySelector("#topics-container").insertAdjacentHTML("beforeend",'\n        <div class="topic-row mb-3 p-3 border rounded">\n            <div class="row">\n                <div class="col-md-4">\n                    <label class="form-label">Topic Name:</label>\n                    <input type="text" class="form-control topic-name" placeholder="e.g., technical">\n                </div>\n                <div class="col-md-7">\n                    <label class="form-label">Keywords (comma-separated):</label>\n                    <input type="text" class="form-control topic-keywords" placeholder="e.g., API, integration, bug, error">\n                </div>\n                <div class="col-md-1 d-flex align-items-end">\n                    <button type="button" class="btn btn-danger btn-sm remove-topic-btn">\n                        <i class="fa fa-trash"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    ')},saveKeywords=modal=>{const topicRows=modal.getRoot()[0].querySelectorAll(".topic-row"),keywordsObject={};let isValid=!0;if(topicRows.forEach((row=>{const topicName=row.querySelector(".topic-name").value.trim(),keywordsText=row.querySelector(".topic-keywords").value.trim();if(topicName&&keywordsText){const keywordsArray=keywordsText.split(",").map((keyword=>keyword.trim())).filter((keyword=>keyword.length>0));keywordsArray.length>0&&(keywordsObject[topicName]=keywordsArray)}else(topicName||keywordsText)&&(isValid=!1,row.style.border="2px solid red")})),!isValid)return void _notification.default.alert("Error","Please fill in both topic name and keywords for all rows, or remove empty rows.");const textarea=document.getElementById("id_topic_keywords");if(textarea){textarea.value=JSON.stringify(keywordsObject,null,2);const event=new Event("change",{bubbles:!0});textarea.dispatchEvent(event)}_notification.default.addNotification({message:"Keywords array updated successfully!",type:"success"}),modal.hide()}}));

//# sourceMappingURL=topic_keywords.min.js.map