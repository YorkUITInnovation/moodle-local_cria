{"version":3,"file":"topic_keywords.min.js","sources":["../src/topic_keywords.js"],"sourcesContent":["/**\n * Topic Keywords Builder\n *\n * @module     local_cria/topic_keywords\n * @copyright  2024 Patrick Thibaudeau\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\n/**\n * Initialize the topic keywords builder\n */\nexport const init = () => {\n    const buildButton = document.getElementById('build-keywords-array');\n    if (buildButton) {\n        buildButton.addEventListener('click', openModal);\n    }\n};\n\n/**\n * Open the topic keywords builder modal\n */\nconst openModal = async () => {\n    try {\n        // Get existing keywords if any\n        const existingData = getExistingKeywords();\n        \n        // Render the modal body\n        const body = await Templates.render('local_cria/topic_keywords_modal', {\n            topics: existingData\n        });\n\n        // Create modal using ModalFactory\n        const modal = await ModalFactory.create({\n            title: 'Topic Keywords Builder',\n            body: body,\n            large: true\n        });\n\n        // Set up event listeners\n        setupModalEvents(modal);\n        \n        // Show the modal\n        modal.show();\n\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Get existing keywords from the textarea\n * @returns {Array} Array of topic objects\n */\nconst getExistingKeywords = () => {\n    const textarea = document.getElementById('id_topic_keywords');\n    console.log('Looking for textarea with id: id_topic_keywords');\n    console.log('Textarea found:', textarea);\n\n    if (!textarea) {\n        console.log('Textarea not found!');\n        return [];\n    }\n\n    console.log('Textarea value:', textarea.value);\n\n    if (!textarea.value.trim()) {\n        console.log('Textarea is empty');\n        return [];\n    }\n\n    try {\n        const data = JSON.parse(textarea.value);\n        console.log('Parsed JSON data:', data);\n\n        const result = Object.entries(data).map(([key, keywords]) => ({\n            topic: key,\n            keywords: Array.isArray(keywords) ? keywords.join(', ') : ''\n        }));\n\n        console.log('Converted data for template:', result);\n        return result;\n    } catch (e) {\n        console.error('Error parsing JSON:', e);\n        return [];\n    }\n};\n\n/**\n * Setup modal event listeners\n * @param {Modal} modal The modal instance\n */\nconst setupModalEvents = (modal) => {\n    const modalRoot = modal.getRoot()[0];\n\n    // Add topic button\n    modalRoot.querySelector('#add-topic-btn').addEventListener('click', () => {\n        addTopicRow(modalRoot);\n    });\n\n    // Save button\n    modalRoot.querySelector('#save-keywords-btn').addEventListener('click', () => {\n        saveKeywords(modal);\n    });\n\n    // Cancel button\n    modalRoot.querySelector('#cancel-keywords-btn').addEventListener('click', () => {\n        modal.hide();\n    });\n\n    // Remove topic buttons (using event delegation)\n    modalRoot.addEventListener('click', (e) => {\n        if (e.target.classList.contains('remove-topic-btn')) {\n            e.target.closest('.topic-row').remove();\n        }\n    });\n\n    // Modal close events\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        modal.destroy();\n    });\n};\n\n/**\n * Add a new topic row to the modal\n * @param {Element} modalRoot The modal root element\n */\nconst addTopicRow = (modalRoot) => {\n    const container = modalRoot.querySelector('#topics-container');\n    const rowHtml = `\n        <div class=\"topic-row mb-3 p-3 border rounded\">\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <label class=\"form-label\">Topic Name:</label>\n                    <input type=\"text\" class=\"form-control topic-name\" placeholder=\"e.g., technical\">\n                </div>\n                <div class=\"col-md-7\">\n                    <label class=\"form-label\">Keywords (comma-separated):</label>\n                    <input type=\"text\" class=\"form-control topic-keywords\" placeholder=\"e.g., API, integration, bug, error\">\n                </div>\n                <div class=\"col-md-1 d-flex align-items-end\">\n                    <button type=\"button\" class=\"btn btn-danger btn-sm remove-topic-btn\">\n                        <i class=\"fa fa-trash\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    container.insertAdjacentHTML('beforeend', rowHtml);\n};\n\n/**\n * Save keywords and update the original textarea\n * @param {Modal} modal The modal instance\n */\nconst saveKeywords = (modal) => {\n    const modalRoot = modal.getRoot()[0];\n    const topicRows = modalRoot.querySelectorAll('.topic-row');\n    const keywordsObject = {};\n\n    // Validate and collect data\n    let isValid = true;\n    topicRows.forEach(row => {\n        const topicName = row.querySelector('.topic-name').value.trim();\n        const keywordsText = row.querySelector('.topic-keywords').value.trim();\n\n        if (topicName && keywordsText) {\n            // Convert comma-separated string to array and clean up\n            const keywordsArray = keywordsText.split(',')\n                .map(keyword => keyword.trim())\n                .filter(keyword => keyword.length > 0);\n            \n            if (keywordsArray.length > 0) {\n                keywordsObject[topicName] = keywordsArray;\n            }\n        } else if (topicName || keywordsText) {\n            // If only one field is filled, show error\n            isValid = false;\n            row.style.border = '2px solid red';\n        }\n    });\n\n    if (!isValid) {\n        Notification.alert('Error', 'Please fill in both topic name and keywords for all rows, or remove empty rows.');\n        return;\n    }\n\n    // Update the original textarea using the specific ID\n    const textarea = document.getElementById('id_topic_keywords');\n    if (textarea) {\n        textarea.value = JSON.stringify(keywordsObject, null, 2);\n        \n        // Trigger change event\n        const event = new Event('change', { bubbles: true });\n        textarea.dispatchEvent(event);\n    }\n\n    // Show success message\n    Notification.addNotification({\n        message: 'Keywords array updated successfully!',\n        type: 'success'\n    });\n\n    // Close modal\n    modal.hide();\n};\n"],"names":["buildButton","document","getElementById","addEventListener","openModal","async","existingData","getExistingKeywords","body","Templates","render","topics","modal","ModalFactory","create","title","large","setupModalEvents","show","error","exception","textarea","console","log","value","trim","data","JSON","parse","result","Object","entries","map","_ref","key","keywords","topic","Array","isArray","join","e","modalRoot","getRoot","querySelector","addTopicRow","saveKeywords","hide","target","classList","contains","closest","remove","on","ModalEvents","hidden","destroy","insertAdjacentHTML","topicRows","querySelectorAll","keywordsObject","isValid","forEach","row","topicName","keywordsText","keywordsArray","split","keyword","filter","length","style","border","alert","stringify","event","Event","bubbles","dispatchEvent","addNotification","message","type"],"mappings":";;;;;;;4SAgBoB,WACVA,YAAcC,SAASC,eAAe,wBACxCF,aACAA,YAAYG,iBAAiB,QAASC,kBAOxCA,UAAYC,oBAGJC,aAAeC,sBAGfC,WAAaC,mBAAUC,OAAO,kCAAmC,CACnEC,OAAQL,eAINM,YAAcC,uBAAaC,OAAO,CACpCC,MAAO,yBACPP,KAAMA,KACNQ,OAAO,IAIXC,iBAAiBL,OAGjBA,MAAMM,OAER,MAAOC,6BACQC,UAAUD,SAQzBZ,oBAAsB,WAClBc,SAAWpB,SAASC,eAAe,wBACzCoB,QAAQC,IAAI,mDACZD,QAAQC,IAAI,kBAAmBF,WAE1BA,gBACDC,QAAQC,IAAI,uBACL,MAGXD,QAAQC,IAAI,kBAAmBF,SAASG,QAEnCH,SAASG,MAAMC,cAChBH,QAAQC,IAAI,qBACL,aAIDG,KAAOC,KAAKC,MAAMP,SAASG,OACjCF,QAAQC,IAAI,oBAAqBG,YAE3BG,OAASC,OAAOC,QAAQL,MAAMM,KAAIC,WAAEC,IAAKC,qBAAe,CAC1DC,MAAOF,IACPC,SAAUE,MAAMC,QAAQH,UAAYA,SAASI,KAAK,MAAQ,cAG9DjB,QAAQC,IAAI,+BAAgCM,QACrCA,OACT,MAAOW,UACLlB,QAAQH,MAAM,sBAAuBqB,GAC9B,KAQTvB,iBAAoBL,cAChB6B,UAAY7B,MAAM8B,UAAU,GAGlCD,UAAUE,cAAc,kBAAkBxC,iBAAiB,SAAS,KAChEyC,YAAYH,cAIhBA,UAAUE,cAAc,sBAAsBxC,iBAAiB,SAAS,KACpE0C,aAAajC,UAIjB6B,UAAUE,cAAc,wBAAwBxC,iBAAiB,SAAS,KACtES,MAAMkC,UAIVL,UAAUtC,iBAAiB,SAAUqC,IAC7BA,EAAEO,OAAOC,UAAUC,SAAS,qBAC5BT,EAAEO,OAAOG,QAAQ,cAAcC,YAKvCvC,MAAM8B,UAAUU,GAAGC,sBAAYC,QAAQ,KACnC1C,MAAM2C,cAQRX,YAAeH,YACCA,UAAUE,cAAc,qBAoBhCa,mBAAmB,o5BAO3BX,aAAgBjC,cAEZ6C,UADY7C,MAAM8B,UAAU,GACNgB,iBAAiB,cACvCC,eAAiB,OAGnBC,SAAU,KACdH,UAAUI,SAAQC,YACRC,UAAYD,IAAInB,cAAc,eAAenB,MAAMC,OACnDuC,aAAeF,IAAInB,cAAc,mBAAmBnB,MAAMC,UAE5DsC,WAAaC,aAAc,OAErBC,cAAgBD,aAAaE,MAAM,KACpClC,KAAImC,SAAWA,QAAQ1C,SACvB2C,QAAOD,SAAWA,QAAQE,OAAS,IAEpCJ,cAAcI,OAAS,IACvBV,eAAeI,WAAaE,oBAEzBF,WAAaC,gBAEpBJ,SAAU,EACVE,IAAIQ,MAAMC,OAAS,qBAItBX,0CACYY,MAAM,QAAS,yFAK1BnD,SAAWpB,SAASC,eAAe,wBACrCmB,SAAU,CACVA,SAASG,MAAQG,KAAK8C,UAAUd,eAAgB,KAAM,SAGhDe,MAAQ,IAAIC,MAAM,SAAU,CAAEC,SAAS,IAC7CvD,SAASwD,cAAcH,6BAIdI,gBAAgB,CACzBC,QAAS,uCACTC,KAAM,YAIVpE,MAAMkC"}